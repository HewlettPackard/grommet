// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components loads 1`] = `
Object {
  "Accordion": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "activeIndex": [Function],
      "alignSelf": [Function],
      "animate": [Function],
      "children": [Function],
      "gridArea": [Function],
      "margin": [Function],
      "messages": [Function],
      "multiple": [Function],
      "onActive": [Function],
    },
    "render": [Function],
  },
  "AccordionPanel": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "header": [Function],
      "label": [Function],
    },
    "render": [Function],
  },
  "Anchor": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "as": [Function],
      "color": [Function],
      "disabled": [Function],
      "gridArea": [Function],
      "href": [Function],
      "icon": [Function],
      "label": [Function],
      "margin": [Function],
      "onClick": [Function],
      "reverse": [Function],
      "size": [Function],
      "weight": [Function],
    },
    "render": [Function],
  },
  "Avatar": [Function],
  "Box": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "align": [Function],
      "alignContent": [Function],
      "alignSelf": [Function],
      "animation": [Function],
      "as": [Function],
      "background": [Function],
      "basis": [Function],
      "border": [Function],
      "direction": [Function],
      "elevation": [Function],
      "fill": [Function],
      "flex": [Function],
      "focusIndicator": [Function],
      "gap": [Function],
      "gridArea": [Function],
      "height": [Function],
      "hoverIndicator": [Function],
      "justify": [Function],
      "margin": [Function],
      "onClick": [Function],
      "overflow": [Function],
      "pad": [Function],
      "responsive": [Function],
      "round": [Function],
      "tag": [Function],
      "width": [Function],
      "wrap": [Function],
    },
    "render": [Function],
  },
  "Button": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "active": [Function],
      "alignSelf": [Function],
      "as": [Function],
      "badge": [Function],
      "children": [Function],
      "color": [Function],
      "disabled": [Function],
      "fill": [Function],
      "focusIndicator": [Function],
      "gap": [Function],
      "gridArea": [Function],
      "hoverIndicator": [Function],
      "href": [Function],
      "icon": [Function],
      "label": [Function],
      "margin": [Function],
      "onClick": [Function],
      "plain": [Function],
      "primary": [Function],
      "reverse": [Function],
      "secondary": [Function],
      "size": [Function],
      "target": [Function],
      "tip": [Function],
      "type": [Function],
    },
    "render": [Function],
  },
  "Calendar": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "activeDate": [Function],
      "alignSelf": [Function],
      "animate": [Function],
      "bounds": [Function],
      "children": [Function],
      "date": [Function],
      "dates": [Function],
      "daysOfWeek": [Function],
      "disabled": [Function],
      "fill": [Function],
      "firstDayOfWeek": [Function],
      "gridArea": [Function],
      "header": [Function],
      "locale": [Function],
      "margin": [Function],
      "messages": [Function],
      "onReference": [Function],
      "onSelect": [Function],
      "range": [Function],
      "reference": [Function],
      "showAdjacentDays": [Function],
      "size": [Function],
    },
    "render": [Function],
  },
  "Card": Object {
    "$$typeof": Symbol(react.forward_ref),
    "render": [Function],
  },
  "CardBody": [Function],
  "CardFooter": [Function],
  "CardHeader": [Function],
  "Carousel": [Function],
  "Chart": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "animate": [Function],
      "bounds": [Function],
      "color": [Function],
      "dash": [Function],
      "gap": [Function],
      "gridArea": [Function],
      "id": [Function],
      "margin": [Function],
      "onClick": [Function],
      "onHover": [Function],
      "opacity": [Function],
      "overflow": [Function],
      "pad": [Function],
      "pattern": [Function],
      "point": [Function],
      "round": [Function],
      "size": [Function],
      "thickness": [Function],
      "type": [Function],
      "values": [Function],
    },
    "render": [Function],
  },
  "CheckBox": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "checked": [Function],
      "disabled": [Function],
      "fill": [Function],
      "id": [Function],
      "indeterminate": [Function],
      "label": [Function],
      "name": [Function],
      "onChange": [Function],
      "pad": [Function],
      "reverse": [Function],
      "toggle": [Function],
    },
    "render": [Function],
  },
  "CheckBoxGroup": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "disabled": [Function],
      "labelKey": [Function],
      "name": [Function],
      "onChange": [Function],
      "options": [Function],
      "value": [Function],
      "valueKey": [Function],
    },
    "render": [Function],
  },
  "Clock": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "gridArea": [Function],
      "hourLimit": [Function],
      "margin": [Function],
      "onChange": [Function],
      "precision": [Function],
      "run": [Function],
      "size": [Function],
      "time": [Function],
      "type": [Function],
    },
    "render": [Function],
  },
  "Collapsible": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "direction": [Function],
      "open": [Function],
    },
    "render": [Function],
  },
  "DataChart": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "axis": [Function],
      "bounds": [Function],
      "chart": [Function],
      "data": [Function],
      "detail": [Function],
      "gap": [Function],
      "gridArea": [Function],
      "guide": [Function],
      "legend": [Function],
      "margin": [Function],
      "pad": [Function],
      "series": [Function],
      "size": [Function],
    },
    "render": [Function],
  },
  "DataTable": [Function],
  "DateInput": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "buttonProps": [Function],
      "calendarProps": [Function],
      "defaultValue": [Function],
      "dropProps": [Function],
      "format": [Function],
      "id": [Function],
      "inline": [Function],
      "inputProps": [Function],
      "name": [Function],
      "onChange": [Function],
      "size": [Function],
      "value": [Function],
    },
    "render": [Function],
  },
  "Diagram": Object {
    "$$typeof": Symbol(react.forward_ref),
    "defaultProps": Object {
      "connections": Array [],
    },
    "propTypes": Object {
      "animation": [Function],
      "connections": [Function],
    },
    "render": [Function],
  },
  "Distribution": [Function],
  "Drop": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "align": [Function],
      "background": [Function],
      "elevation": [Function],
      "margin": [Function],
      "onClickOutside": [Function],
      "onEsc": [Function],
      "overflow": [Function],
      "plain": [Function],
      "responsive": [Function],
      "restrictFocus": [Function],
      "round": [Function],
      "stretch": [Function],
      "target": [Function],
      "trapFocus": [Function],
    },
    "render": [Function],
  },
  "DropButton": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "disabled": [Function],
      "dropAlign": [Function],
      "dropContent": [Function],
      "dropProps": [Function],
      "dropTarget": [Function],
      "gridArea": [Function],
      "margin": [Function],
      "onClose": [Function],
      "onOpen": [Function],
      "open": [Function],
    },
    "render": [Function],
  },
  "FileInput": Object {
    "$$typeof": Symbol(react.forward_ref),
    "defaultProps": Object {},
    "propTypes": Object {
      "disabled": [Function],
      "id": [Function],
      "messages": [Function],
      "multiple": [Function],
      "name": [Function],
      "onChange": [Function],
      "renderFile": [Function],
    },
    "render": [Function],
  },
  "Footer": [Function],
  "Form": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "errors": [Function],
      "infos": [Function],
      "messages": [Function],
      "onChange": [Function],
      "onReset": [Function],
      "onSubmit": [Function],
      "onValidate": [Function],
      "validate": [Function],
      "value": [Function],
    },
    "render": [Function],
  },
  "FormContext": Object {
    "$$typeof": Symbol(react.context),
    "Consumer": Object {
      "$$typeof": Symbol(react.context),
      "_calculateChangedBits": null,
      "_context": [Circular],
    },
    "Provider": Object {
      "$$typeof": Symbol(react.provider),
      "_context": [Circular],
    },
    "_calculateChangedBits": null,
    "_currentRenderer": null,
    "_currentRenderer2": null,
    "_currentValue": Object {
      "useFormField": [Function],
      "useFormInput": [Function],
    },
    "_currentValue2": Object {
      "useFormField": [Function],
      "useFormInput": [Function],
    },
    "_threadCount": 0,
  },
  "FormField": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "component": [Function],
      "contentProps": [Function],
      "disabled": [Function],
      "error": [Function],
      "help": [Function],
      "htmlFor": [Function],
      "info": [Function],
      "label": [Function],
      "margin": [Function],
      "name": [Function],
      "pad": [Function],
      "required": [Function],
      "validate": [Function],
    },
    "render": [Function],
  },
  "Grid": Object {
    "$$typeof": Symbol(react.forward_ref),
    "available": undefined,
    "propTypes": Object {
      "a11yTitle": [Function],
      "align": [Function],
      "alignContent": [Function],
      "alignSelf": [Function],
      "areas": [Function],
      "as": [Function],
      "border": [Function],
      "columns": [Function],
      "fill": [Function],
      "gap": [Function],
      "gridArea": [Function],
      "height": [Function],
      "justify": [Function],
      "justifyContent": [Function],
      "margin": [Function],
      "pad": [Function],
      "responsive": [Function],
      "rows": [Function],
      "tag": [Function],
      "width": [Function],
    },
    "render": [Function],
  },
  "Grommet": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "background": [Function],
      "containerTarget": [Function],
      "cssVars": [Function],
      "dir": [Function],
      "full": [Function],
      "messages": [Function],
      "options": [Function],
      "plain": [Function],
      "theme": [Function],
      "themeMode": [Function],
      "userAgent": [Function],
    },
    "render": [Function],
  },
  "Header": Object {
    "$$typeof": Symbol(react.forward_ref),
    "render": [Function],
  },
  "Heading": Object {
    "$$typeof": Symbol(react.forward_ref),
    "defaultProps": Object {
      "level": 1,
      "responsive": true,
    },
    "propTypes": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "color": [Function],
      "fill": [Function],
      "gridArea": [Function],
      "level": [Function],
      "margin": [Function],
      "responsive": [Function],
      "size": [Function],
      "textAlign": [Function],
      "truncate": [Function],
    },
    "render": [Function],
  },
  "Image": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "fallback": [Function],
      "fill": [Function],
      "fit": [Function],
      "gridArea": [Function],
      "margin": [Function],
      "opacity": [Function],
    },
    "render": [Function],
  },
  "InfiniteScroll": [Function],
  "Keyboard": [Function],
  "Layer": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "animate": [Function],
      "animation": [Function],
      "background": [Function],
      "full": [Function],
      "margin": [Function],
      "modal": [Function],
      "onClickOutside": [Function],
      "onEsc": [Function],
      "plain": [Function],
      "position": [Function],
      "responsive": [Function],
      "target": [Function],
    },
    "render": [Function],
  },
  "List": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "action": [Function],
      "alignSelf": [Function],
      "as": [Function],
      "background": [Function],
      "border": [Function],
      "children": [Function],
      "data": [Function],
      "gridArea": [Function],
      "itemProps": [Function],
      "margin": [Function],
      "onClickItem": [Function],
      "onMore": [Function],
      "onOrder": [Function],
      "pad": [Function],
      "paginate": [Function],
      "primaryKey": [Function],
      "secondaryKey": [Function],
      "show": [Function],
      "step": [Function],
    },
    "render": [Function],
  },
  "Main": [Function],
  "Markdown": [Function],
  "MaskedInput": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "dropHeight": [Function],
      "dropProps": [Function],
      "focusIndicator": [Function],
      "icon": [Function],
      "id": [Function],
      "mask": [Function],
      "name": [Function],
      "onBlur": [Function],
      "onChange": [Function],
      "reverse": [Function],
      "size": [Function],
      "textAlign": [Function],
      "value": [Function],
    },
    "render": [Function],
  },
  "Menu": Object {
    "$$typeof": Symbol(react.forward_ref),
    "defaultProps": Object {
      "items": Array [],
      "justifyContent": "start",
      "messages": undefined,
    },
    "propTypes": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "children": [Function],
      "disabled": [Function],
      "dropAlign": [Function],
      "dropBackground": [Function],
      "dropProps": [Function],
      "dropTarget": [Function],
      "gridArea": [Function],
      "icon": [Function],
      "items": [Function],
      "justifyContent": [Function],
      "label": [Function],
      "margin": [Function],
      "messages": [Function],
      "open": [Function],
      "size": [Function],
    },
    "render": [Function],
  },
  "Meter": Object {
    "$$typeof": Symbol(react.forward_ref),
    "prototype": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "background": [Function],
      "color": [Function],
      "direction": [Function],
      "gridArea": [Function],
      "margin": [Function],
      "max": [Function],
      "round": [Function],
      "size": [Function],
      "thickness": [Function],
      "type": [Function],
      "value": [Function],
      "values": [Function],
    },
    "render": [Function],
  },
  "Nav": [Function],
  "Pagination": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "gridArea": [Function],
      "margin": [Function],
      "numberEdgePages": [Function],
      "numberItems": [Function],
      "numberMiddlePages": [Function],
      "onChange": [Function],
      "page": [Function],
      "size": [Function],
      "step": [Function],
    },
    "render": [Function],
  },
  "Paragraph": Object {
    "$$typeof": Symbol(react.forward_ref),
    "prototype": Object {
      "a11yTitle": [Function],
      "alignSelf": [Function],
      "color": [Function],
      "fill": [Function],
      "gridArea": [Function],
      "margin": [Function],
      "responsive": [Function],
      "size": [Function],
      "textAlign": [Function],
    },
    "render": [Function],
  },
  "RadioButton": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "a11yTitle": [Function],
      "checked": [Function],
      "children": [Function],
      "disabled": [Function],
      "id": [Function],
      "label": [Function],
      "name": [Function],
      "onChange": [Function],
    },
    "render": [Function],
  },
  "RadioButtonGroup": Object {
    "$$typeof": Symbol(react.forward_ref),
    "propTypes": Object {
      "children": [Function],
      "disabled": [Function],
      "name": [Function],
      "onChange": [Function],
      "options": [Function],
      "value": [Function],
    },
    "render": [Function],
  },
  "RangeInput": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Input-RangeInput&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/rangeinput&module=%2Fsrc%2FRangeInput.js",
      },
    ],
    "description": "A slider control to input a value within a fixed range.",
    "intrinsicElement": "input",
    "name": "RangeInput",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "The id attribute of the range input.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "The minimum value permitted.",
        "format": "number
string",
        "name": "min",
      },
      Object {
        "description": "The maximum value permitted.",
        "format": "number
string",
        "name": "max",
      },
      Object {
        "description": "The name attribute of the range input.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user changes the value. It will
      be passed an event object. The new input value will be available
      via 'event.target.value'.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "The step interval between values.",
        "format": "number",
        "name": "step",
      },
      Object {
        "description": "The current value.",
        "format": "number
string",
        "name": "value",
      },
    ],
    "usage": "import { RangeInput } from 'grommet';
<RangeInput />",
  },
  "RangeSelector": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Input-RangeSelector&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/rangeselector&module=%2Fsrc%2FRangeSelector.js",
      },
    ],
    "description": "A control to input a range of values.",
    "intrinsicElement": "div",
    "name": "RangeSelector",
    "properties": Array [
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": "horizontal",
        "description": "",
        "format": "horizontal
vertical",
        "name": "direction",
      },
      Object {
        "description": "Whether to indicate what has not been selected.",
        "format": "boolean",
        "name": "invert",
      },
      Object {
        "defaultValue": 100,
        "description": "The maximum value permitted.",
        "format": "number",
        "name": "max",
      },
      Object {
        "description": "Custom messages used by screen readers for accessibility.",
        "format": "{
  lower: string,
  upper: string
}",
        "name": "messages",
      },
      Object {
        "defaultValue": 0,
        "description": "The minimum value permitted.",
        "format": "number",
        "name": "min",
      },
      Object {
        "description": "Function that will be called when the user changes one of the
      values. It will be passed an array of two numbers indicating
      the new values selected.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "defaultValue": "medium",
        "description": "Transparency of the selection indicator.",
        "format": "weak
medium
strong
string
boolean",
        "name": "opacity",
      },
      Object {
        "description": "How much to round the corners.",
        "format": "xsmall
small
medium
large
full
string",
        "name": "round",
      },
      Object {
        "defaultValue": "medium",
        "description": "How thick to make the selection indicator.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
full
string",
        "name": "size",
      },
      Object {
        "defaultValue": 1,
        "description": "The step interval between values.",
        "format": "number",
        "name": "step",
      },
      Object {
        "description": "The current values.",
        "format": "[number]",
        "name": "values",
        "required": true,
      },
    ],
    "usage": "import { RangeSelector } from 'grommet';
<RangeSelector />",
  },
  "RoutedAnchor": [Function],
  "RoutedButton": [Function],
  "Select": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Input-Select&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/select&module=%2Fsrc%2FSelect.js",
      },
    ],
    "description": "A control to select a value, with optional search.",
    "name": "Select",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Function that will be called when each option is rendered.
      It will be passed (option, index, options, state) where option
      is the option to render, index is the index of that option in the
      options array, and state is an object with
      { active, disabled, selected } keys indicating the current state
      of the option.",
        "format": "function",
        "name": "children",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to provide a button option to clear selections.",
        "format": "boolean
{
  position: 
    top
    bottom,
  label: string
}",
        "name": "clear",
      },
      Object {
        "defaultValue": true,
        "description": "Wether to close the drop when a selection is made.",
        "format": "boolean",
        "name": "closeOnChange",
      },
      Object {
        "description": "Initially selected value. This can be an array
      when multiple.",
        "format": "string
object
number
[
  string
  object
  number
]",
        "name": "defaultValue",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the entire select or individual options should be disabled.
        An array of numbers indicates the indexes into 'options' of the
        disabled options. An array of strings or objects work the same way
        as the 'value' to indicate which options are disabled.",
        "format": "boolean
[
  number
  string
  object
]",
        "name": "disabled",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
      to determine which options should be disabled. If a string is
      provided, it is used as the key for each item object and if that key
      returns truthy, the option is disabled. If a function is provided, it is
      called with the option and the return value determines if the option
      is disabled.",
        "format": "string
function",
        "name": "disabledKey",
      },
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "bottom",
        },
        "description": "How to align the drop.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}",
        "name": "dropAlign",
      },
      Object {
        "description": "The height of the drop container.",
        "format": "xsmall
small
medium
large
xlarge
string",
        "name": "dropHeight",
      },
      Object {
        "description": "Target where the options drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the Select itself by default.",
        "format": "object",
        "name": "dropTarget",
      },
      Object {
        "description": "Any valid Drop prop.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "description": "Whether when 'plain' it should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "description": "A custom icon to be used when rendering the select. You can use false to
       not render an icon at all.",
        "format": "boolean
function
node",
        "name": "icon",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
      to retrieve the label for each option.
      If a string is provided, it is used as the key to retrieve
      a property of an
      option object, which should be a string.
      If a function is provided, it is called with the option and should
      return a string or a React node.
      The label is what is displayed to the user in the options list
      drop down and for the selected option itself.",
        "format": "string
function",
        "name": "labelKey",
      },
      Object {
        "description": "Custom messages.",
        "format": "{
  multiple: string
}",
        "name": "messages",
      },
      Object {
        "description": "Whether to allow multiple options to be selected. When multiple is true, 
      'value' should be an array of selected options and 'options' should be 
      an array of possible options",
        "format": "boolean",
        "name": "multiple",
      },
      Object {
        "description": "The name of the attribute when in a Form or FormField.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user selects an option.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Function that will be called when the Select drop closes.",
        "format": "function",
        "name": "onClose",
      },
      Object {
        "description": "Function that will be called when the Select drop opens.",
        "format": "function",
        "name": "onOpen",
      },
      Object {
        "description": "Function that will be called when the user types in the search input.
      If this property is not provided, no search field will be rendered.",
        "format": "function",
        "name": "onSearch",
      },
      Object {
        "description": "Use this to indicate that 'items' doesn't contain all that it could.
      It will be called when the entire list of items has been rendered.
      This might be used when the total number of items that could be retrieved
      is more than you'd want to load into the browser. 'onMore' allows you
      to lazily fetch more from the server only when needed.",
        "format": "function",
        "name": "onMore",
      },
      Object {
        "description": "Options can be either a string or an object. If an object is used, use
      children callback in order to render anything based on the current item.",
        "format": "[
  string
  number
  boolean
  element
  object
]",
        "name": "options",
        "required": true,
      },
      Object {
        "description": "Control the state of the component.",
        "format": "boolean",
        "name": "open",
      },
      Object {
        "description": "Placeholder to use when no value is provided.",
        "format": "string
element
node",
        "name": "placeholder",
      },
      Object {
        "description": "Whether this is a plain Select input with no border or padding.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "defaultValue": true,
        "description": "Whether to replace previously rendered items with a generic spacing
      element when they have scrolled out of view. This is more performant but
      means that in-page searching will not find elements that have been
      replaced.",
        "format": "boolean",
        "name": "replace",
      },
      Object {
        "description": "Placeholder text to use in the search box when the search input is 
      empty.",
        "format": "string",
        "name": "searchPlaceholder",
      },
      Object {
        "description": "Index of the currently selected option. When multiple, the set of
      options selected. NOTE: This is deprecated in favor of indicating
      the selected values via the 'value' property.",
        "format": "number
[number]",
        "name": "selected",
      },
      Object {
        "description": "The size of the text and icon.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "description": "The currently selected value.
    When 'valueKey' sets 'reduce', the value(s) here should match what the
    'valueKey' would return for the corresponding selected option object.
    Otherwise, the value should be one (or multiple, when multiple = true)
    of the options from the options array.
    Passing an element allows the caller to control how the value is rendered.
    Passing an element is deprecated. Instead, use the 'valueLabel' property.",
        "format": "string
element
object
number
[
  string
  object
  number
]",
        "name": "value",
      },
      Object {
        "description": "Provides custom rendering of the value. If not provided, Select
      will render the value automatically.",
        "format": "node",
        "name": "valueLabel",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
      to retrieve the value of each option.
      If a string is provided, it is used as the key to retrieve a
      property of an option object.
      If a function is provided, it is called with the option and should
      return the value.
      If reduce is true, this value will be used for the 'value'
      delivered via 'onChange'.",
        "format": "string
function
{
  key: string,
  reduce: boolean
}",
        "name": "valueKey",
      },
      Object {
        "defaultValue": "No matches found",
        "description": "Empty option message to display when no matching results were found",
        "format": "string",
        "name": "emptySearchMessage",
      },
    ],
    "usage": "import { Select } from 'grommet';
<Select />",
  },
  "Sidebar": [Function],
  "SkipLink": Object {
    "$$typeof": Symbol(react.forward_ref),
    "render": [Function],
  },
  "SkipLinkTarget": [Function],
  "SkipLinks": [Function],
  "Spinner": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Visualizations-Spinner&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/spinner&module=%2Fsrc%2FSpinner.js",
      },
    ],
    "description": "A Spinner.",
    "name": "Spinner",
    "properties": Array [
      Object {
        "defaultValue": "small",
        "description": "A fixed size.",
        "format": "xsmall
small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "defaultValue": undefined,
        "description": "The border color of the Spinner.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": undefined,
        "description": "When message is a string, the message will be announced for 
        screen readers once the Spinner is loaded. 
        When an object, the 'start' message will be announced 
        as the Spinner appears, and the 'end' message as the spinner closes.",
        "format": "string
{
  start: string,
  end: string
}",
        "name": "message",
      },
    ],
    "usage": "import { Spinner } from 'grommet';
<Spinner/>",
  },
  "Stack": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Layout-Stack&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/stack&module=%2Fsrc%2FStack.js",
      },
    ],
    "description": "A container that stacks contents on top of each other. One child is
      designated as the \`guidingChild\` which determines the size. All
      other children are placed within that size, either above or below
      based on their order. Stack is typically used to decorate Meter, Chart,
      or icons.",
    "intrinsicElement": "div",
    "name": "Stack",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Where to anchor children from. If not specified, children
      fill the guiding child's area.",
        "format": "center
left
right
top
bottom
top-left
bottom-left
top-right
bottom-right",
        "name": "anchor",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to expand to fill
      all of the available width and height in the parent container.",
        "format": "horizontal
vertical
boolean",
        "name": "fill",
      },
      Object {
        "defaultValue": "first",
        "description": "Which child to guide layout from. All other children
      will be positioned within that area. Defaults to 'first'.",
        "format": "number
first
last",
        "name": "guidingChild",
      },
      Object {
        "description": "Which child to restrict user interaction to. All other children
      will have user interaction disabled.",
        "format": "number
first
last",
        "name": "interactiveChild",
      },
    ],
    "usage": "import { Stack } from 'grommet';
<Stack />",
  },
  "Tab": Object {
    "description": "One tab within Tabs.",
    "intrinsicElement": "button",
    "name": "Tab",
    "properties": Array [
      Object {
        "defaultValue": false,
        "description": "Whether the tab is disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "Icon element to place in the tab.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "defaultValue": false,
        "description": "Whether this is a plain tab with no style.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "defaultValue": false,
        "description": "Whether an icon and label should be reversed so that the icon is at the
              end of the tab.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "The title of the tab.",
        "format": "node",
        "name": "title",
      },
    ],
    "usage": "import { Tab } from 'grommet';
<Tab />",
  },
  "Table": [Function],
  "TableBody": Object {
    "description": "The body of a table.",
    "intrinsicElement": "tbody",
    "name": "TableBody",
    "usage": "import { TableBody } from 'grommet';
<TableBody />",
  },
  "TableCell": Object {
    "description": "A cell of data in a table.",
    "intrinsicElement": "td",
    "name": "TableCell",
    "properties": Array [
      Object {
        "defaultValue": false,
        "description": "Whether default styling context should be removed.",
        "format": "boolean
noPad",
        "name": "plain",
      },
      Object {
        "description": "For header cells, what scope the header is for.
        Typically, the cells in a TableHeader have 'col' scope and
        the primary cell in each row in the TableBody has 'row' scope.",
        "format": "col
row",
        "name": "scope",
      },
      Object {
        "description": "What size the cell should be. Typically, this is not needed
      unless you are trying to align multiple tables.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
1/2
1/3
2/3
1/4
2/4
3/4
string",
        "name": "size",
      },
      Object {
        "description": "How to align the contents vertically.",
        "format": "top
middle
bottom",
        "name": "verticalAlign",
      },
      Object {
        "description": "How to align the body inside the Table.",
        "format": "left
right
center
justify
inherit
start
end
string",
        "name": "align",
      },
    ],
    "usage": "import { TableCell } from 'grommet';
<TableCell />",
  },
  "TableFooter": Object {
    "description": "The footer of a table.",
    "intrinsicElement": "tfoot",
    "name": "TableFooter",
    "usage": "import { TableFooter } from 'grommet';
<TableFooter />",
  },
  "TableHeader": Object {
    "description": "The header of a table.",
    "intrinsicElement": "thead",
    "name": "TableHeader",
    "usage": "import { TableHeader } from 'grommet';
<TableHeader />",
  },
  "TableRow": Object {
    "description": "A row of cells in a table.",
    "intrinsicElement": "tr",
    "name": "TableRow",
    "usage": "import { TableRow } from 'grommet';
<TableRow />",
  },
  "Tabs": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Controls-Tabs&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/tabs&module=%2Fsrc%2FTabs.js",
      },
    ],
    "description": "A container with controls to show one Tab at a time.",
    "intrinsicElement": "div",
    "name": "Tabs",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Active tab index. If specified, Tabs will be a controlled component.
This means that future tab changes will not work unless you subscribe to
onActive function and update activeIndex accordingly.",
        "format": "number",
        "name": "activeIndex",
      },
      Object {
        "description": "How to align the tab controls within the tabs header.",
        "format": "start
center
end
stretch",
        "name": "alignControls",
      },
      Object {
        "description": "Array of Tab.",
        "format": "node",
        "name": "children",
        "required": true,
      },
      Object {
        "description": "Whether flex-grow and/or flex-shrink is true.",
        "format": "grow
shrink
boolean",
        "name": "flex",
      },
      Object {
        "defaultValue": "center",
        "description": "How to align the tabs along the main axis.",
        "format": "start
center
end",
        "name": "justify",
      },
      Object {
        "defaultValue": Object {
          "tabContents": "Tab Contents",
        },
        "description": "Custom messages for Tabs. Used for accessibility by screen readers.",
        "format": "{
  tabContents: string
}",
        "name": "messages",
      },
      Object {
        "description": "Function that will be called with the active tab index when the
currently active tab changes.",
        "format": "function",
        "name": "onActive",
      },
    ],
    "usage": "import { Tabs, Tab } from 'grommet';
<Tabs>
  <Tab title='Tab 1'>...</Tab>
  <Tab title='Tab 2'>...</Tab>
</Tabs>",
  },
  "Text": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Type-Text&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/text&module=%2Fsrc%2FText.js",
      },
    ],
    "description": "Arbitrary text.",
    "intrinsicElement": "span",
    "name": "Text",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can be 
    specified to distinguish horizontal margin, vertical margin, and margin on 
    a particular side. For vertical margin to be applied, Text needs to be 
    contained within a layout component (such as Box or a generic div) or 
    behave as a div (by applying as=\\"div\\" or a display style of 
    inline-block).",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": "medium",
        "description": "The font size and line space height of the text.",
        "format": "xsmall
small
medium
large
xlarge
xxlarge
2xl
3xl
4xl
5xl
6xl
string",
        "name": "size",
      },
      Object {
        "description": "The DOM tag to use for the element. NOTE: This is deprecated in favor
         of indicating the DOM tag via the 'as' property.",
        "format": "string
function",
        "name": "tag",
      },
      Object {
        "defaultValue": "span",
        "description": "The DOM tag or react component to use for the element.",
        "format": "string
function
element",
        "name": "as",
      },
      Object {
        "defaultValue": "start",
        "description": "How to align the text inside the component.",
        "format": "start
center
end
justify",
        "name": "textAlign",
      },
      Object {
        "description": "tooltip or a hint when hovering over the text. If the
        value is a string and no a11yTitle value is provided, tip value will be
        used for the a11yTitle default value.",
        "format": "{
  content: 
    node
    string,
  dropProps: 
    {

    },
  plain: boolean
}
string",
        "name": "tip",
      },
      Object {
        "defaultValue": false,
        "description": "Restrict the text to a single line and truncate with ellipsis if it
is too long to all fit. For truncate to be applied, Text needs to be 
contained within a layout component (such as Box or a generic div). If 
truncate = tip, the full text content will be placed in a Tip that will appear 
on hover.",
        "format": "boolean
tip",
        "name": "truncate",
      },
      Object {
        "description": "Font weight",
        "format": "normal
bold
number",
        "name": "weight",
      },
      Object {
        "defaultValue": "normal",
        "description": "Whether words should break when reaching the end of a line.",
        "format": "normal
break-all
keep-all
break-word",
        "name": "wordBreak",
      },
    ],
    "usage": "import { Text } from 'grommet';
<Text />",
  },
  "TextArea": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Input-TextArea&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/textarea&module=%2Fsrc%2FTextArea.js",
      },
    ],
    "description": "A control to input multiple lines of text.",
    "intrinsicElement": "textarea",
    "name": "TextArea",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "The id attribute of the textarea.",
        "format": "string",
        "name": "id",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the width and height should fill the container.",
        "format": "boolean",
        "name": "fill",
      },
      Object {
        "description": "Whether the plain TextArea should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "description": "The name attribute of the textarea.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user types in the textarea.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Placeholder text to use when no value is provided.",
        "format": "string",
        "name": "placeholder",
      },
      Object {
        "description": "Whether this is a plain textarea with no border or padding.
Only use this when the containing context provides sufficient affordance.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "description": "What text to put in the textarea.",
        "format": "string",
        "name": "value",
      },
      Object {
        "defaultValue": true,
        "description": "Whether user is allowed to resize the textarea.",
        "format": "vertical
horizontal
boolean",
        "name": "resize",
      },
      Object {
        "description": "The size of the text.",
        "format": "xsmall
small
medium
large
xlarge
xxlarge
2xl
3xl
4xl
5xl
6xl
string",
        "name": "size",
      },
    ],
    "usage": "import { TextArea } from 'grommet';
<TextArea id='item' name='item' />",
  },
  "TextInput": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Input-TextInput&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/textinput&module=%2Fsrc%2FTextInput.js",
      },
    ],
    "description": "A control to input a single line of text, with optional suggestions.",
    "intrinsicElement": "input",
    "name": "TextInput",
    "properties": Array [
      Object {
        "description": "Custom title to be used by screen readers.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "Default suggestion to highlight, as an index into the suggestions array.

      If set, the suggestion at the specified index in the suggestions array
      will be highlighted by default when the suggestions drop opens.
      ",
        "format": "number",
        "name": "defaultSuggestion",
      },
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "bottom",
        },
        "description": "How to align the drop.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}",
        "name": "dropAlign",
      },
      Object {
        "description": "The height of the drop container.",
        "format": "xsmall
small
medium
large
xlarge
string",
        "name": "dropHeight",
      },
      Object {
        "description": "Target where any suggestions drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the TextInput itself by default.",
        "format": "object",
        "name": "dropTarget",
      },
      Object {
        "description": "Any valid Drop prop.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "description": "An optional icon to show. This could be used to provide an
      indication of what kind of input is expected, like an email icon,
      or what the input will be used for, like a search icon.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "description": "The id attribute of the input.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "Whether the plain TextInput should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "defaultValue": Object {
          "enterSelect": "(Press Enter to Select)",
          "suggestionIsOpen": "Suggestions drop is open, continue to use arrow keys to navigate",
          "suggestionsCount": "suggestions available",
          "suggestionsExist": "This input has suggestions use arrow keys to navigate",
        },
        "description": "Custom messages for TextInput. Used for accessibility by screen
        readers.",
        "format": "{
  enterSelect: string,
  suggestionsCount: string,
  suggestionsExist: string,
  suggestionIsOpen: string
}",
        "name": "messages",
      },
      Object {
        "description": "The name of the attribute when in a Form or FormField.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user types in the input.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Note: This function is deprecated, use onSuggestionSelect instead.
      Function that will be called when the user selects a suggestion.
      The suggestion contains the object chosen from the supplied suggestions.
      When used in conjunction with onSuggestionSelect
      this will default to React's onSelect",
        "format": "function",
        "name": "onSelect",
      },
      Object {
        "description": "Function that will be called when the user selects a suggestion.
      The suggestion contains the object chosen from the supplied suggestions.",
        "format": "function",
        "name": "onSuggestionSelect",
      },
      Object {
        "description": "Function that will be called when the suggestions drop is opened.",
        "format": "function",
        "name": "onSuggestionsOpen",
      },
      Object {
        "description": "Function that will be called when the suggestions drop is closed.",
        "format": "function",
        "name": "onSuggestionsClose",
      },
      Object {
        "description": "Placeholder to use when no value is provided.",
        "format": "node",
        "name": "placeholder",
      },
      Object {
        "description": "Whether this is a plain input with no border or outline.
      Use \\"full\\" to remove padding in addition to removing border and outline.
      Only use this when the containing context provides sufficient
      affordance.",
        "format": "boolean
full",
        "name": "plain",
      },
      Object {
        "description": "Whether an icon should be reversed so that the icon is at the
      end of the input.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "The size of the text.",
        "format": "xsmall
small
medium
large
xlarge
xxlarge
2xl
3xl
4xl
5xl
6xl
string",
        "name": "size",
      },
      Object {
        "description": "Suggestions to show. It is recommended to avoid showing too many
suggestions and instead rely on the user to type more.",
        "format": "[
  {
    label: node,
    value: any
  }
  string
]",
        "name": "suggestions",
      },
      Object {
        "defaultValue": "start",
        "description": "How to align the text inside the input.",
        "format": "start
center
end",
        "name": "textAlign",
      },
      Object {
        "description": "What text to put in the input.",
        "format": "string
number",
        "name": "value",
      },
    ],
    "usage": "import { TextInput } from 'grommet';
<TextInput id='item' name='item' />",
  },
  "Tip": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Controls-Tip&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/tip&module=%2Fsrc%2FTip.js",
      },
    ],
    "description": "Tooltip or a hint when hovering over an element. The tooltip will render 
      when hovering on top of the Tip's child node or string.",
    "name": "Tip",
    "properties": Array [
      Object {
        "description": "The tooltip content inside the drop.",
        "format": "node",
        "name": "content",
      },
      Object {
        "defaultValue": Object {
          "trapFocus": false,
        },
        "description": "Any valid Drop prop to style the Tip drop container.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "defaultValue": undefined,
        "description": "Whether content should have default styling from tip.content.",
        "format": "boolean",
        "name": "plain",
      },
    ],
    "usage": "import { Tip } from 'grommet';
<Tip />",
  },
  "Video": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Media-Video&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/video&module=%2Fsrc%2FVideo.js",
      },
    ],
    "description": "A video player.",
    "intrinsicElement": "video",
    "name": "Video",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Enables automatic playback of the video as soon as it is loaded.",
        "format": "boolean",
        "name": "autoPlay",
      },
      Object {
        "defaultValue": "over",
        "description": "Whether to show playback controls and where to place them.",
        "format": "false
over
below",
        "name": "controls",
      },
      Object {
        "description": "How the image fills its container.",
        "format": "cover
contain",
        "name": "fit",
      },
      Object {
        "description": "Enables continuous video looping.",
        "format": "boolean",
        "name": "loop",
      },
      Object {
        "description": "Enables video muting. This option is best used with the autoPlay flag.",
        "format": "boolean",
        "name": "mute",
      },
      Object {
        "description": "Custom messages. Used for accessibility by screen readers.",
        "format": "{
  closeMenu: string,
  fullScreen: string,
  progressMeter: string,
  openMenu: string,
  pauseButton: string,
  playButton: string,
  scrubber: string,
  volumeDown: string,
  volumeUp: string
}",
        "name": "messages",
      },
    ],
    "usage": "import { Video } from 'grommet';
<Video />",
  },
  "WorldMap": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Visualizations-WorldMap&full=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/worldmap&module=%2Fsrc%2FWorldMap.js",
      },
    ],
    "description": "A map of the world, or a continent.",
    "intrinsicElement": "svg",
    "name": "WorldMap",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "description": "Continent details.",
        "format": "[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  name: 
    Africa
    Asia
    Australia
    Europe
    North America
    South America,
  onClick: function,
  onHover: function
}]",
        "name": "continents",
      },
      Object {
        "description": "Whether the width and/or height should fill the container.",
        "format": "horizontal
vertical
boolean",
        "name": "fill",
      },
      Object {
        "description": "Called when the user clicks on a place.
        It is passed the location.",
        "format": "function",
        "name": "onSelectPlace",
      },
      Object {
        "description": "Place details. location is an array of two numeric values that indicates
       the latitude and longitude of the specified location.",
        "format": "[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  name: string,
  location: [number],
  onClick: function,
  onHover: function
}]",
        "name": "places",
      },
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "hoverColor",
      },
    ],
    "usage": "import { WorldMap } from 'grommet';
<WorldMap />",
  },
  "__esModule": true,
  "calcBounds": [Function],
  "calcs": [Function],
  "round": [Function],
}
`;
