// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`README is updated 1`] = `
Object {
  "FormField": "## FormField
A single field in a form. FormField wraps an input component with
      a label, help, and/or error messaging. It typically contains an input
      control like TextInput, TextArea, Select, etc.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Input-FormField&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/formfield&module=%2Fsrc%2FFormField.js)
## Usage

\`\`\`javascript
import { FormField } from 'grommet';
<FormField />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers.
       Should only be provided if FormField has no children.
       When a11yTitle is provided an aria-label will be added to the element
       if it has no children.

\`\`\`
string
\`\`\`

**component**

The component to insert in the FormField. Grommet will add update the
      form values when this field changes. Any additional properties
      (such as initial value) you pass to FormField will be forwarded to this
      component. The component may be custom as long it supports the properties
      of name, value, onChange (event => {}), while event has either event.value
      or event.target.value.

\`\`\`
function
object
\`\`\`

**contentProps**

Any valid Box property. These
     properties are applied to the FormField contents container and will
     override properties from the theme.

\`\`\`
object
\`\`\`

**disabled**

Whether the field should look disabled.

\`\`\`
boolean
\`\`\`

**error**

Any error text describing issues with the field's value

\`\`\`
string
node
\`\`\`

**help**

Any help text describing how the field works

\`\`\`
string
node
\`\`\`

**htmlFor**

The id of the input element contained in this field

\`\`\`
string
\`\`\`

**info**

Any informational text regarding the field's value

\`\`\`
string
node
\`\`\`

**label**

A short label describing the field

\`\`\`
string
node
\`\`\`

**name**

The name of the value data when in a Form and the name of
      the input field.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**pad**

Whether to add padding to align with the padding of TextInput.

\`\`\`
boolean
\`\`\`

**required**

Whether the field is required.

\`\`\`
boolean
\`\`\`

**validate**

Validation rule when used within a grommet Form. Provide an object
      with a regular expression, a function, or an array of these. If a
      function is provided, it will be called with two arguments, the value
      for this field and the entire value object. This permits validation to
      encompass multiple fields. The function should return a string message
      describing the validation issue, if any, or an object with 'message'
      and 'status' properties.

\`\`\`
{
  regexp: new RegExp(...),
  message: 
    string
    node,
  status: 
    error
    info
}
function
[
  {
    regexp: new RegExp(...),
    message: 
      string
      node,
    status: 
      error
      info
  }
  function
]
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**formField.border.color**

The border color. Expects \`string | { 'dark': string, 'light': string }\`.

Defaults to

\`\`\`
border
\`\`\`

**formField.border.error.color**

The border color of the error. Deprecated, use 
    error.border.color instead. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'status-critical' },
\`\`\`

**formField.border.position**

The border position. Expects \`string\`.

Defaults to

\`\`\`
inner
\`\`\`

**formField.border.side**

The border side of the FormField. Expects \`string\`.

Defaults to

\`\`\`
bottom
\`\`\`

**formField.content.margin**

The margin of the FormField content. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.content.pad**

The pad of the FormField content. Expects \`object\`.

Defaults to

\`\`\`
small
\`\`\`

**formField.disabled.background.color**

The color of the FormField background when it is disabled. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.disabled.background.opacity**

The opacity of the FormField background when it is disabled. Expects \`string | boolean | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.disabled.border.color**

The color of the FormField border when it is disabled. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.disabled.label.color**

The color of the FormField label when it is disabled. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.error.background.color**

The color of the FormField background when there is an error. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.error.background.opacity**

The opacity of the FormField background when there is an error. Expects \`string | boolean | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.error.border.color**

The border color of the error. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'status-critical' },
\`\`\`

**formField.error.color**

The color of the FormField error. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
status-critical
\`\`\`

**formField.error.container**

Any valid Box props for the container surrounding the error 
    message and icon. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.error.icon**

An icon placed in a row with the error message. Expects \`React.Element\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.error.size**

The size of the error message to be displayed.
     The default size is medium. Expects \`string\`.

Defaults to

\`\`\`
medium
\`\`\`

**formField.error.size.xsmall**

The size of a 'xsmall' error message. Expects \`string\`.

Defaults to

\`\`\`
12px
\`\`\`

**formField.error.size.small**

The size of a 'small' error message. Expects \`string\`.

Defaults to

\`\`\`
14px
\`\`\`

**formField.error.size.medium**

The size of a 'medium' error message. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`

**formField.error.size.large**

The size of a 'large' error message. Expects \`string\`.

Defaults to

\`\`\`
22px
\`\`\`

**formField.error.size.xlarge**

The size of a 'xlarge' error message. Expects \`string\`.

Defaults to

\`\`\`
26px
\`\`\`

**formField.info.container**

Any valid Box props for the container surrounding the info 
    message and icon. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.info.icon**

An icon placed in a row with the info message. Expects \`React.Element\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.error.margin**

The margin used for the FormField error. Expects \`string | object\`.

Defaults to

\`\`\`
{ vertical: 'xsmall', horizontal: 'small' }
\`\`\`

**formField.focus.background.color**

The color of the FormField background when it is in focus. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.focus.border.color**

The color of the FormField border when it is in focus. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.extend**

Any additional style for FormField. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.help.color**

The color of the FormField help. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
{ dark: 'dark-3', light: 'dark-3' }
\`\`\`

**formField.help.margin**

The margin for the FormField help. Expects \`string | object\`.

Defaults to

\`\`\`
{ left: 'small' }
\`\`\`

**formField.info.color**

The color of the FormField info. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
text-xweak
\`\`\`

**formField.info.margin**

The margin used for the FormField info. Expects \`string | object\`.

Defaults to

\`\`\`
{ vertical: 'xsmall', horizontal: 'small' }
\`\`\`

**formField.label**

Any props of Text that will be applied on the FormField label. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.label.margin**

The margin for the FormField label. Expects \`string | object\`.

Defaults to

\`\`\`
{ vertical: 'xsmall', horizontal: 'small' }
\`\`\`

**formField.label.requiredIndicator**

Whether an asterisk (*) indicating that an input is required 
    should be displayed adjacent to the FormField's label. If providing a 
    custom element, for accessibility it is recommended that you include 
    an a11yTitle of \\"required\\" to assist screen readers. If using \\"true\\", the 
    a11yTitle is automatically applied. Expects \`boolean | element | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.margin**

The margin of FormField. Expects \`string | object\`.

Defaults to

\`\`\`
{ bottom: 'small' }
\`\`\`

**formField.round**

The rounding of the FormField. Expects \`boolean | string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.borderSize**

The possible border sizes for FormField. Expects \`object\`.

Defaults to

\`\`\`
{
  xsmall: '1px',
  small: '2px',
  medium: '4px',
  large: '12px',
  xlarge: '24px,
}
\`\`\`
",
  "Meter": "## Meter
A graphical meter.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Visualizations-Meter&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/meter&module=%2Fsrc%2FMeter.js)
## Usage

\`\`\`javascript
import { Meter } from 'grommet';
<Meter />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**background**

Background color Defaults to \`{
  \\"color\\": \\"light-2\\",
  \\"opacity\\": \\"medium\\"
}\`.

\`\`\`
string
{
  color: string,
  opacity: 
    weak
    medium
    strong
    number
    boolean
}
\`\`\`

**color**

The color of the value region.
      This is only valid when used with 'value'

\`\`\`
string
\`\`\`

**max**

The maximum value for the Meter.

\`\`\`
number
string
\`\`\`

**round**

Whether to round the line ends

\`\`\`
boolean
\`\`\`

**size**

The size of the Meter. Defaults to \`medium\`.

\`\`\`
xsmall
small
medium
large
xlarge
full
string
\`\`\`

**thickness**

The size of the Meter. Defaults to \`medium\`.

\`\`\`
xsmall
small
medium
large
xlarge
string
\`\`\`

**type**

The visual type of meter. Defaults to \`bar\`.

\`\`\`
bar
circle
pie
semicircle
\`\`\`

**direction**

The direction of the Meter you want to display.
       The default direction is horizontal.Currently, direction works only
       when 'type' of Meter is 'bar'.

\`\`\`
horizontal
vertical
\`\`\`

**value**


      The numeric value to represent. Ignored when 'values' is specified.
    

\`\`\`
number
\`\`\`

**values**

Array of value objects describing the data.
      'value' is the actual numeric value.
      'label' is a text string describing it.
      'color' indicates the color name to use. If not specified a default one
      will be chosen.
      'onClick' will be called when the user clicks on it.
      Set 'highlight' to call attention to it.
      'onHover' will be called with a boolean argument indicating when the
      user hovers onto or away from it.

\`\`\`
[{
  color: string,
  highlight: boolean,
  label: string,
  onClick: function,
  onHover: function,
  value: number
}]
\`\`\`
  
## Theme
  
**global.colors**

Color options. Expects \`object\`.

Defaults to

\`\`\`
{
      \\"accent-1\\": \\"#6FFFB0\\",
      \\"graph-0\\": \\"accent-1\\",
      ...
    }
\`\`\`

**global.edgeSize**

The border-radius of the styled Meter. thickness, height and 
    width of the Bar Meter, height of the Circle Meter. Expects \`object\`.

Defaults to

\`\`\`
{
        none: '0px',
        hair: '1px',
        xxsmall: '3px',
        xsmall: '6px',
        small: '12px',
        medium: '24px',
        large: '48px',
        xlarge: '96px',
        responsiveBreakpoint: 'small',
    }
\`\`\`

**global.opacity.medium**

The opacity value used on the Meter color. Expects \`number\`.

Defaults to

\`\`\`
0.4
\`\`\`

**global.size**

The possible sizes for Circle Meter width. Expects \`object\`.

Defaults to

\`\`\`
{
      xxsmall: '48px',
      xsmall: '96px',
      small: '192px',
      medium: '384px',
      large: '768px',
      xlarge: '1152px',
      xxlarge: '1536px',
      full: '100%',
    }
\`\`\`

**meter.color**

The color used for the Meter. Expects \`string\`.

Defaults to

\`\`\`
accent-1
\`\`\`

**meter.extend**

Any additional style for Meter. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "RadioButton": "## RadioButton
A radio button control.

RadioButton should typically not be used directly.
      Instead, use RadioButtonGroup.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Input-RadioButton&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/radiobutton&module=%2Fsrc%2FRadioButton.js)
## Usage

\`\`\`javascript
import { RadioButton } from 'grommet';
<RadioButton />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.

\`\`\`
string
\`\`\`

**checked**

Same as React <input checked={} />

\`\`\`
boolean
\`\`\`

**children**

Function that will be called to render the visual representation.
      It will be passed an object indicating whether the button is checked. It
      should return a react element.
      For example:
      \`children={({ checked }) => <Box ...>{...}</Box>}\`
      

\`\`\`
function
\`\`\`

**disabled**

Same as React <input disabled={} />. Also adds a hidden input element
with the same name so form submissions work.

\`\`\`
boolean
\`\`\`

**id**

The DOM id attribute value to use for the underlying <input/> element.

\`\`\`
string
\`\`\`

**label**

Label text to place next to the control.

\`\`\`
node
\`\`\`

**name**

Required. The DOM name attribute value to use for the underlying <input/>
       element.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user clicks the radio button. It
      will be passed a React event object. The current state can be accessed
      via event.target.checked. Same as React <input onChange={} />.

\`\`\`
function
\`\`\`
  
## Intrinsic element

\`\`\`
input
\`\`\`
## Theme
  
**global.colors.control**

The default color of the border surrounding 
    the checked icon in RadioButton checked state. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'accent-1', light: 'brand'}
\`\`\`

**radioButton.border.color**

The color of the border of the Radio Button. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{dark: 'rgba(255, 255, 255, 0.5), light: 'rgba(0, 0, 0, 0.15)}
\`\`\`

**radioButton.border.width**

The width size of the border of the RadioButton. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**radioButton.check.background.color**

The background color of the checked icon in the RadioButton. Expects \`string | {dark: string, light: string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.check.color**

The color of the checked icon in the RadioButton. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.check.extend**

Any additional style for the checked RadioButton. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.check.radius**

The border-radius of the RadioButton. Expects \`string\`.

Defaults to

\`\`\`
100%
\`\`\`

**radioButton.color**

The color of the border surrounding the checked 
    icon in RadioButton checked state. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.container.extend**

Any additional style for the container around 
    the radio button and its label. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.extend**

Any additional style for the radio button itself. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.font.weight**

The font weight of the label. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.gap**

The gap between the label and the RadioButton itself. Expects \`string\`.

Defaults to

\`\`\`
small
\`\`\`

**radioButton.hover.background.color**

The background color of the Box surrounding the RadioButton
    when hovered over. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.hover.border.color**

The color of the RadioButton border when hovered over. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{dark: white, light: black}
\`\`\`

**radioButton.icon.extend**

Any additional style for the RadioButton icon. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.icon.size**

The size of the icon in the RadioButton. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.icons.circle**

The icon to replace the inner checked circle. Expects \`React.Element\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.size**

The size of the RadioButton. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`
",
  "RangeInput": "## RangeInput
A slider control to input a value within a fixed range.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Input-RangeInput&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/rangeinput&module=%2Fsrc%2FRangeInput.js)
## Usage

\`\`\`javascript
import { RangeInput } from 'grommet';
<RangeInput />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.

\`\`\`
string
\`\`\`

**id**

The id attribute of the range input.

\`\`\`
string
\`\`\`

**min**

The minimum value permitted.

\`\`\`
number
string
\`\`\`

**max**

The maximum value permitted.

\`\`\`
number
string
\`\`\`

**name**

The name attribute of the range input.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user changes the value. It will
      be passed an event object. The new input value will be available
      via 'event.target.value'.

\`\`\`
function
\`\`\`

**step**

The step interval between values.

\`\`\`
number
\`\`\`

**value**

The current value.

\`\`\`
number
string
\`\`\`
  
## Intrinsic element

\`\`\`
input
\`\`\`
## Theme
  
**global.focus.border.color**

The border color of the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.outline.color**

The outline color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.outline.size**

The size of the outline around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.shadow.color**

The shadow color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.shadow.size**

The size of the shadow around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**global.colors.border**

The color used for rangeInput.track.color. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: rgba(255, 255, 255, 0.33), light: rgba(0, 0, 0, 0.33) }
\`\`\`

**global.spacing**

The height, width and border-radius of the range thumb. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**rangeInput.extend**

Any additional style for the RangeInput. Expects \`string | (props) => \`
      any CSS styling;
    \`\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.thumb.color**

The color of the thumb. Expects \`string | { dark: undefined, light: undefined }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.thumb.extend**

Any additional style for the thumb. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.color**

The color of the track. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
border
\`\`\`

**rangeInput.track.opacity**

The opacity of the track color. Expects \`string | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.lower.color**

The color of the lower bound track. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.lower.opacity**

The opacity on the lower bound track color. Expects \`string | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.upper.color**

The color of the upper track. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.upper.opacity**

The opacity on the upper track color. Expects \`string | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.extend**

Any additional style for the track. Expects \`string | (props) => \`
      any CSS styling;
    \`\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.height**

The height of the track. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`
",
  "RangeSelector": "## RangeSelector
A control to input a range of values.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Input-RangeSelector&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/rangeselector&module=%2Fsrc%2FRangeSelector.js)
## Usage

\`\`\`javascript
import { RangeSelector } from 'grommet';
<RangeSelector />
\`\`\`

## Properties

**color**

What color to use to indicate the selection.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**direction**

 Defaults to \`horizontal\`.

\`\`\`
horizontal
vertical
\`\`\`

**invert**

Whether to indicate what has not been selected.

\`\`\`
boolean
\`\`\`

**max**

The maximum value permitted. Defaults to \`100\`.

\`\`\`
number
\`\`\`

**messages**

Custom messages used by screen readers for accessibility.

\`\`\`
{
  lower: string,
  upper: string
}
\`\`\`

**min**

The minimum value permitted.

\`\`\`
number
\`\`\`

**onChange**

Function that will be called when the user changes one of the
      values. It will be passed an array of two numbers indicating
      the new values selected.

\`\`\`
function
\`\`\`

**opacity**

Transparency of the selection indicator. Defaults to \`medium\`.

\`\`\`
weak
medium
strong
string
boolean
\`\`\`

**round**

How much to round the corners.

\`\`\`
xsmall
small
medium
large
full
string
\`\`\`

**size**

How thick to make the selection indicator. Defaults to \`medium\`.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
full
string
\`\`\`

**step**

The step interval between values. Defaults to \`1\`.

\`\`\`
number
\`\`\`

**values**

Required. The current values.

\`\`\`
[number]
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**global.borderSize**

The size of the border. Expects \`string\`.

Defaults to

\`\`\`
{
      xsmall: '1px',
      small: '2px',
      medium: '4px',
      large: '12px',
      xlarge: '24px,
    }
\`\`\`

**global.colors.border**

The color for the border. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
[object Object]
\`\`\`

**global.colors.control**

The color for the edge controls. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{dark: accent-1, light: brand}
\`\`\`

**global.colors.focus**

The color of the focus. Expects \`string\`.

Defaults to

\`\`\`
accent-1
\`\`\`

**global.edgeSize.small**

The possible sizes for the margin, padding and gap. Expects \`string\`.

Defaults to

\`\`\`
6px
\`\`\`

**rangeSelector.background.invert.color**

The background color on an invert display. Expects \`string\`.

Defaults to

\`\`\`
light-4
\`\`\`

**rangeSelector.edge.type**

The edge control type. Expects \`'bar' | 'disc' | node\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.spacing**

The size of the edge controls thumb. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`
",
  "RoutedAnchor": "## RoutedAnchor
An Anchor with support for React Router.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Controls-RoutedAnchor&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/routedanchor&module=%2Fsrc%2FRoutedAnchor.js)
## Usage

\`\`\`javascript
import { RoutedAnchor } from 'grommet';
<RoutedAnchor primary path='/documentation' />
\`\`\`

## Properties

**path**

Required. Indicates the path to be used for react-router link.

\`\`\`
string
\`\`\`

**method**

Indicates whether the browser history should be appended to or 
      replaced. Defaults to \`push\`.

\`\`\`
push
replace
\`\`\`
  
## Intrinsic element

\`\`\`
a
\`\`\`",
  "RoutedButton": "## RoutedButton
A button with support for React Router.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Controls-RoutedButton&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/routedbutton&module=%2Fsrc%2FRoutedButton.js)
## Usage

\`\`\`javascript
import { RoutedButton } from 'grommet';
<RoutedButton primary path='/documentation' />
\`\`\`

## Properties

**path**

Required. Indicates the path to be used for react-router link.

\`\`\`
string
\`\`\`

**method**

Indicates whether the browser history should be appended to or 
      replaced. Defaults to \`push\`.

\`\`\`
push
replace
\`\`\`
  
## Intrinsic element

\`\`\`
button
\`\`\`",
  "Select": "## Select
A control to select a value, with optional search.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Input-Select&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/select&module=%2Fsrc%2FSelect.js)
## Usage

\`\`\`javascript
import { Select } from 'grommet';
<Select />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**children**

Function that will be called when each option is rendered.
      It will be passed (option, index, options, state) where option
      is the option to render, index is the index of that option in the
      options array, and state is an object with
      { active, disabled, selected } keys indicating the current state
      of the option.

\`\`\`
function
\`\`\`

**clear**

Whether to provide a button option to clear selections.

\`\`\`
boolean
{
  position: 
    top
    bottom,
  label: string
}
\`\`\`

**closeOnChange**

Wether to close the drop when a selection is made. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**defaultValue**

Initially selected value. This can be an array
      when multiple.

\`\`\`
string
object
number
[
  string
  object
  number
]
\`\`\`

**disabled**

Whether the entire select or individual options should be disabled.
        An array of numbers indicates the indexes into 'options' of the
        disabled options. An array of strings or objects work the same way
        as the 'value' to indicate which options are disabled.

\`\`\`
boolean
[
  number
  string
  object
]
\`\`\`

**disabledKey**

When the options array contains objects, this property indicates how
      to determine which options should be disabled. If a string is
      provided, it is used as the key for each item object and if that key
      returns truthy, the option is disabled. If a function is provided, it is
      called with the option and the return value determines if the option
      is disabled.

\`\`\`
string
function
\`\`\`

**dropAlign**

How to align the drop. Defaults to \`{
  \\"top\\": \\"bottom\\",
  \\"left\\": \\"left\\"
}\`.

\`\`\`
{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}
\`\`\`

**dropHeight**

The height of the drop container.

\`\`\`
xsmall
small
medium
large
xlarge
string
\`\`\`

**dropTarget**

Target where the options drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the Select itself by default.

\`\`\`
object
\`\`\`

**dropProps**

Any valid Drop prop.

\`\`\`
object
\`\`\`

**focusIndicator**

Whether when 'plain' it should receive a focus outline.

\`\`\`
boolean
\`\`\`

**icon**

A custom icon to be used when rendering the select. You can use false to
       not render an icon at all.

\`\`\`
boolean
function
node
\`\`\`

**labelKey**

When the options array contains objects, this property indicates how
      to retrieve the label for each option.
      If a string is provided, it is used as the key to retrieve
      a property of an
      option object, which should be a string.
      If a function is provided, it is called with the option and should
      return a string or a React node.
      The label is what is displayed to the user in the options list
      drop down and for the selected option itself.

\`\`\`
string
function
\`\`\`

**messages**

Custom messages.

\`\`\`
{
  multiple: string
}
\`\`\`

**multiple**

Whether to allow multiple options to be selected. When multiple is true, 
      'value' should be an array of selected options and 'options' should be 
      an array of possible options

\`\`\`
boolean
\`\`\`

**name**

The name of the attribute when in a Form or FormField.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user selects an option.

\`\`\`
function
\`\`\`

**onClose**

Function that will be called when the Select drop closes.

\`\`\`
function
\`\`\`

**onOpen**

Function that will be called when the Select drop opens.

\`\`\`
function
\`\`\`

**onSearch**

Function that will be called when the user types in the search input.
      If this property is not provided, no search field will be rendered.

\`\`\`
function
\`\`\`

**onMore**

Use this to indicate that 'items' doesn't contain all that it could.
      It will be called when the entire list of items has been rendered.
      This might be used when the total number of items that could be retrieved
      is more than you'd want to load into the browser. 'onMore' allows you
      to lazily fetch more from the server only when needed.

\`\`\`
function
\`\`\`

**options**

Required. Options can be either a string or an object. If an object is used, use
      children callback in order to render anything based on the current item.

\`\`\`
[
  string
  number
  boolean
  element
  object
]
\`\`\`

**open**

Control the state of the component.

\`\`\`
boolean
\`\`\`

**placeholder**

Placeholder to use when no value is provided.

\`\`\`
string
element
node
\`\`\`

**plain**

Whether this is a plain Select input with no border or padding.

\`\`\`
boolean
\`\`\`

**replace**

Whether to replace previously rendered items with a generic spacing
      element when they have scrolled out of view. This is more performant but
      means that in-page searching will not find elements that have been
      replaced. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**searchPlaceholder**

Placeholder text to use in the search box when the search input is 
      empty.

\`\`\`
string
\`\`\`

**selected**

Index of the currently selected option. When multiple, the set of
      options selected. NOTE: This is deprecated in favor of indicating
      the selected values via the 'value' property.

\`\`\`
number
[number]
\`\`\`

**size**

The size of the text and icon.

\`\`\`
small
medium
large
xlarge
string
\`\`\`

**value**

The currently selected value.
    When 'valueKey' sets 'reduce', the value(s) here should match what the
    'valueKey' would return for the corresponding selected option object.
    Otherwise, the value should be one (or multiple, when multiple = true)
    of the options from the options array.
    Passing an element allows the caller to control how the value is rendered.
    Passing an element is deprecated. Instead, use the 'valueLabel' property.

\`\`\`
string
element
object
number
[
  string
  object
  number
]
\`\`\`

**valueLabel**

Provides custom rendering of the value. If not provided, Select
      will render the value automatically.

\`\`\`
node
\`\`\`

**valueKey**

When the options array contains objects, this property indicates how
      to retrieve the value of each option.
      If a string is provided, it is used as the key to retrieve a
      property of an option object.
      If a function is provided, it is called with the option and should
      return the value.
      If reduce is true, this value will be used for the 'value'
      delivered via 'onChange'.

\`\`\`
string
function
{
  key: string,
  reduce: boolean
}
\`\`\`

**emptySearchMessage**

Empty option message to display when no matching results were found Defaults to \`No matches found\`.

\`\`\`
string
\`\`\`
  
## Theme
  
**global.hover.background**

The background style when hovering. Expects \`string | { color: string, opacity: string }\`.

Defaults to

\`\`\`
{ color: 'active', opacity: 'medium' }
\`\`\`

**global.hover.color**

The text color when hovering. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'black' }
\`\`\`

**select.background**

The background color used for Select. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.options.container**

Any valid Box prop for the options container. Expects \`object\`.

Defaults to

\`\`\`
{ align: 'start', pad: 'small' }
\`\`\`

**select.options.text**

Any valid Text prop for text used inside the options container. Expects \`object\`.

Defaults to

\`\`\`
{ margin: 'none }
\`\`\`

**select.container.extend**

Any additional style for the container of the Select component. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.clear.container**

Any valid Box prop for the clear button container. Expects \`object\`.

Defaults to

\`\`\`
{ pad: 'small', background: 'light-2' }
\`\`\`

**select.clear.text**

Any valid Text prop for text used inside the clear button container. Expects \`object\`.

Defaults to

\`\`\`
{ color: 'dark-3' }
\`\`\`

**select.control.open**

Any additional style for the Select DropButton when using the
    controlled open state. Expects \`string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.control.extend**

Any additional style for the control of the Select component. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.icons.margin**

The margin used for Select icons. Expects \`string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.icons.color**

The color used for Select icons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.icons.down**

The down icon to use for opening the Select. Expects \`React.Element\`.

Defaults to

\`\`\`
<FormDown />
\`\`\`

**select.icons.up**

The up icon to use for closing the Select. Expects \`React.Element\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.searchInput**

Component for the Select search input field. Expects \`React.Component\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.step**

How many items to render at a time. Expects \`number\`.

Defaults to

\`\`\`
20
\`\`\`
",
  "Sidebar": "## Sidebar
A sidebar, typically used with Nav children.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Layout-Sidebar&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/sidebar&module=%2Fsrc%2FSidebar.js)
## Usage

\`\`\`javascript
import { Sidebar } from 'grommet';
<Sidebar/>
\`\`\`

## Properties

**footer**

If specified, a footer element for the Sidebar

\`\`\`
node
\`\`\`

**header**

If specified, an header element for the Sidebar

\`\`\`
node
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`",
  "SkipLinks": "## SkipLinks
Describe a list of elements to skip to.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Utilities-SkipLinks&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/skiplinks&module=%2Fsrc%2FSkipLinks.js)
## Usage

\`\`\`javascript
import { SkipLinks } from 'grommet';
<SkipLinks elements={['main', 'footer']} />
\`\`\`

## Properties

**children**

Required. Array of SkipLink

\`\`\`
node
\`\`\`

**messages**

Custom messages for SkipLinks. Used for accessibility by screen 
readers.

\`\`\`
{
  skipTo: string
}
\`\`\`
  
## Theme
  
**skipLinks.position**

Position of the layer content once opened. Expects \`string\`.

Defaults to

\`\`\`
top
\`\`\`

**skipLinks.container**

Any valid Box prop for the SkipLinks container. Expects \`object\`.

Defaults to

\`\`\`
{ elevation: 'large', pad: 'medium', round: 'small' }
\`\`\`

**skipLinks.container.elevation**

The container shadow. Expects \`string\`.

Defaults to

\`\`\`
large
\`\`\`

**skipLinks.container.pad**

The pad used for the layer container. Expects \`string | object\`.

Defaults to

\`\`\`
medium
\`\`\`

**skipLinks.container.round**

The rounding of the later container. Expects \`boolean | string | object\`.

Defaults to

\`\`\`
small
\`\`\`

**skipLinks.label**

Any valid Text prop for the text message. Expects \`object\`.

Defaults to

\`\`\`
{ margin: 'small', size: 'medium' }
\`\`\`

**skipLinks.label.margin**

The margin size around the text message. Expects \`string\`.

Defaults to

\`\`\`
{ bottom: medium }
\`\`\`

**skipLinks.label.size**

The font size of the text label. Expects \`string\`.

Defaults to

\`\`\`
medium
\`\`\`

**text.medium.size**

The font size of the text label. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`
",
  "Spinner": "## Spinner
A Spinner.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Visualizations-Spinner&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/spinner&module=%2Fsrc%2FSpinner.js)
## Usage

\`\`\`javascript
import { Spinner } from 'grommet';
<Spinner/>
\`\`\`

## Properties

**size**

A fixed size. Defaults to \`small\`.

\`\`\`
xsmall
small
medium
large
xlarge
string
\`\`\`

**color**

The border color of the Spinner.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**message**

When message is a string, the message will be announced for 
        screen readers once the Spinner is loaded. 
        When an object, the 'start' message will be announced 
        as the Spinner appears, and the 'end' message as the spinner closes.

\`\`\`
string
{
  start: string,
  end: string
}
\`\`\`
  
## Theme
  
**spinner.container**

Any valid Box prop for the Spinner container. 
    Including 'color' for the spinner border color and 'size' for the default 
    size of the Spinner. Expects \`object\`.

Defaults to

\`\`\`
[object Object]
\`\`\`

**spinner.icon**

An icon or an SVG to use as the default Spinner. Expects \`ReactElement | SVG\`.

Defaults to

\`\`\`
undefined
\`\`\`

**spinner.size.xsmall**

The xsmall size of the Spinner. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`

**spinner.size.small**

The small size of the Spinner. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**spinner.size.medium**

The medium size of the Spinner. Expects \`string\`.

Defaults to

\`\`\`
48px
\`\`\`

**spinner.size.large**

The large size of the Spinner. Expects \`string\`.

Defaults to

\`\`\`
72px
\`\`\`

**spinner.size.xlarge**

The xlarge size of the Spinner. Expects \`string\`.

Defaults to

\`\`\`
96px
\`\`\`
",
  "Stack": "## Stack
A container that stacks contents on top of each other. One child is
      designated as the \`guidingChild\` which determines the size. All
      other children are placed within that size, either above or below
      based on their order. Stack is typically used to decorate Meter, Chart,
      or icons.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Layout-Stack&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/stack&module=%2Fsrc%2FStack.js)
## Usage

\`\`\`javascript
import { Stack } from 'grommet';
<Stack />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**anchor**

Where to anchor children from. If not specified, children
      fill the guiding child's area.

\`\`\`
center
left
right
top
bottom
top-left
bottom-left
top-right
bottom-right
\`\`\`

**fill**

Whether to expand to fill
      all of the available width and height in the parent container.

\`\`\`
horizontal
vertical
boolean
\`\`\`

**guidingChild**

Which child to guide layout from. All other children
      will be positioned within that area. Defaults to 'first'. Defaults to \`first\`.

\`\`\`
number
first
last
\`\`\`

**interactiveChild**

Which child to restrict user interaction to. All other children
      will have user interaction disabled.

\`\`\`
number
first
last
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**stack.extend**

Any additional style for the control of the Stack component. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Tab": "## Tab
One tab within Tabs.

## Usage

\`\`\`javascript
import { Tab } from 'grommet';
<Tab />
\`\`\`

## Properties

**disabled**

Whether the tab is disabled.

\`\`\`
boolean
\`\`\`

**icon**

Icon element to place in the tab.

\`\`\`
element
\`\`\`

**plain**

Whether this is a plain tab with no style.

\`\`\`
boolean
\`\`\`

**reverse**

Whether an icon and label should be reversed so that the icon is at the
              end of the tab.

\`\`\`
boolean
\`\`\`

**title**

The title of the tab.

\`\`\`
node
\`\`\`
  
## Intrinsic element

\`\`\`
button
\`\`\`
## Theme
  
**tab.active**

styles for the active tab. Expects \`object\`.

Defaults to

\`\`\`
{color: 'text', background: undefined }
\`\`\`

**tab.background**

background styling of Tab. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.border**

border styles of the tab Expects \`object\`.

Defaults to

\`\`\`
{
      side: 'bottom',
      size: 'small',
      color: {
        dark: 'accent-1',
        light: 'brand',
      },
      active: {
        color: {
          dark: 'white',
          light: 'black',
        },
      },
      hover: {
        color: {
          dark: 'white',
          light: 'black',
        },
        // extend: undefined,
      },
    }
\`\`\`

**tab.border.disabled.color**

border color of the Tab when disabled Expects \`string | {dark: string, light: string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.color**

text color for the Tab. Expects \`string | {dark: string, light: string}\`.

Defaults to

\`\`\`
control
\`\`\`

**tab.disabled.color**

text color of the Tab when disabled. Expects \`string | {dark: string, light: string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.extend**

Any additional style for Tab. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.hover.background**

background style of the Tab on hover. Expects \`string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.hover.color**

text color of the tab on hover. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'black' }
\`\`\`

**tab.hover.extend**

Any additional style for Tab hover. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.margin**

The margin of Tab. Expects \`string | object\`.

Defaults to

\`\`\`
{ vertical: 'xxsmall', horizontal: 'small' }
\`\`\`

**tab.pad**

The pad of Tab. Expects \`string | object\`.

Defaults to

\`\`\`
{ bottom: 'xsmall' }
\`\`\`
",
  "Table": "## Table
A table of data organized in cells.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Visualizations-Table&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/table&module=%2Fsrc%2FTable.js)
## Usage

\`\`\`javascript
import { Table, TableHeader, TableFooter, TableBody, TableRow } from 'grommet';
<Table />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**caption**

One line description.

\`\`\`
string
\`\`\`
  
## Intrinsic element

\`\`\`
table
\`\`\`
## Theme
  
**global.edgeSize.responsiveBreakpoint**

The actual breakpoint to trigger changes in Table. Expects \`string\`.

Defaults to

\`\`\`
small
\`\`\`

**global.size**

The size that impacts max-width and width. Expects \`undefined\`.

Defaults to

\`\`\`
{
      xxsmall: '48px',
      xsmall: '96px',
      small: '192px',
      medium: '384px',
      large: '768px',
      xlarge: '1152px',
      xxlarge: '1536px',
      full: '100%',
      }
\`\`\`

**table.extend**

Any additional style for Table. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "TableBody": "## TableBody
The body of a table.

## Usage

\`\`\`javascript
import { TableBody } from 'grommet';
<TableBody />
\`\`\`

## Properties

  
## Intrinsic element

\`\`\`
tbody
\`\`\`",
  "TableCell": "## TableCell
A cell of data in a table.

## Usage

\`\`\`javascript
import { TableCell } from 'grommet';
<TableCell />
\`\`\`

## Properties

**plain**

Whether default styling context should be removed.

\`\`\`
boolean
noPad
\`\`\`

**scope**

For header cells, what scope the header is for.
        Typically, the cells in a TableHeader have 'col' scope and
        the primary cell in each row in the TableBody has 'row' scope.

\`\`\`
col
row
\`\`\`

**size**

What size the cell should be. Typically, this is not needed
      unless you are trying to align multiple tables.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
1/2
1/3
2/3
1/4
2/4
3/4
string
\`\`\`

**verticalAlign**

How to align the contents vertically.

\`\`\`
top
middle
bottom
\`\`\`

**align**

How to align the body inside the Table.

\`\`\`
left
right
center
justify
inherit
start
end
string
\`\`\`
  
## Intrinsic element

\`\`\`
td
\`\`\`
## Theme
  
**table.body.align**

How to align the body inside the Table. Expects \`string\`.

Defaults to

\`\`\`
start
\`\`\`

**table.body.border**

The border side of the body. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.body.extend**

Any additional style for Table body. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.body.pad**

The padding of the body. Expects \`string | object\`.

Defaults to

\`\`\`
{ horizontal: 'small', vertical: 'xsmall' }
\`\`\`

**table.footer.align**

How to align the footer inside the Table. Expects \`string\`.

Defaults to

\`\`\`
start
\`\`\`

**table.footer.border**

The border side of the footer. Expects \`string\`.

Defaults to

\`\`\`
top
\`\`\`

**table.footer.extend**

Any additional style for Table footer. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.footer.fill**

Whether the height should fill the footer. Expects \`string\`.

Defaults to

\`\`\`
vertical
\`\`\`

**table.footer.pad**

The padding of the footer. Expects \`string | object\`.

Defaults to

\`\`\`
{ horizontal: 'small', vertical: 'xsmall' }
\`\`\`

**table.footer.verticalAlign**

How to align the content vertically. Expects \`string\`.

Defaults to

\`\`\`
top
\`\`\`

**table.header.align**

How to align the header inside the Table. Expects \`string\`.

Defaults to

\`\`\`
start
\`\`\`

**table.header.background**

The background color of the header. Expects \`string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.header.border**

The border side of the header. Expects \`string\`.

Defaults to

\`\`\`
bottom
\`\`\`

**table.header.fill**

Whether the height should fill the header. Expects \`string\`.

Defaults to

\`\`\`
vertical
\`\`\`

**table.header.extend**

Any additional style for Table header. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.header.pad**

The padding of the header. Expects \`string | object\`.

Defaults to

\`\`\`
{ horizontal: 'small', vertical: 'xsmall' }
\`\`\`

**table.header.verticalAlign**

How to align the content vertically. Expects \`string\`.

Defaults to

\`\`\`
bottom
\`\`\`
",
  "TableFooter": "## TableFooter
The footer of a table.

## Usage

\`\`\`javascript
import { TableFooter } from 'grommet';
<TableFooter />
\`\`\`

## Properties

  
## Intrinsic element

\`\`\`
tfoot
\`\`\`",
  "TableHeader": "## TableHeader
The header of a table.

## Usage

\`\`\`javascript
import { TableHeader } from 'grommet';
<TableHeader />
\`\`\`

## Properties

  
## Intrinsic element

\`\`\`
thead
\`\`\`",
  "TableRow": "## TableRow
A row of cells in a table.

## Usage

\`\`\`javascript
import { TableRow } from 'grommet';
<TableRow />
\`\`\`

## Properties

  
## Intrinsic element

\`\`\`
tr
\`\`\`",
  "Tabs": "## Tabs
A container with controls to show one Tab at a time.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Controls-Tabs&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/tabs&module=%2Fsrc%2FTabs.js)
## Usage

\`\`\`javascript
import { Tabs, Tab } from 'grommet';
<Tabs>
  <Tab title='Tab 1'>...</Tab>
  <Tab title='Tab 2'>...</Tab>
</Tabs>
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**activeIndex**

Active tab index. If specified, Tabs will be a controlled component.
This means that future tab changes will not work unless you subscribe to
onActive function and update activeIndex accordingly.

\`\`\`
number
\`\`\`

**alignControls**

How to align the tab controls within the tabs header.

\`\`\`
start
center
end
stretch
\`\`\`

**children**

Required. Array of Tab.

\`\`\`
node
\`\`\`

**flex**

Whether flex-grow and/or flex-shrink is true.

\`\`\`
grow
shrink
boolean
\`\`\`

**justify**

How to align the tabs along the main axis. Defaults to \`center\`.

\`\`\`
start
center
end
\`\`\`

**messages**

Custom messages for Tabs. Used for accessibility by screen readers. Defaults to \`{
  \\"tabContents\\": \\"Tab Contents\\"
}\`.

\`\`\`
{
  tabContents: string
}
\`\`\`

**onActive**

Function that will be called with the active tab index when the
currently active tab changes.

\`\`\`
function
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**global.borderSize**

The size of the border. Expects \`string\`.

Defaults to

\`\`\`
{
      xsmall: '1px',
      small: '2px',
      medium: '4px',
      large: '12px',
      xlarge: '24px,
    }
\`\`\`

**global.colors.border**

The color of tabs border. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: rgba(255, 255, 255, 0.33), light: rgba(0, 0, 0, 0.33) }
\`\`\`

**global.edgeSize.small**

The possible sizes for margin, pad and gap. Expects \`string\`.

Defaults to

\`\`\`
6px
\`\`\`

**tabs.background**

background styling of Tabs. Expects \`string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.extend**

Any additional style for Tabs. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.gap**

The gap size between the Tabs. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.background**

The background styles of Tabs header. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.border.color**

border color of the tabs controls Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.border.side**

side of the border of the tabs controls Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.border.size**

border size of the tabs controls Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.border.style**

border style of the tabs controls Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.extend**

Any additional style for Tabs header. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.panel.extend**

Any additional style for Tabs panel. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Text": "## Text
Arbitrary text.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Type-Text&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/text&module=%2Fsrc%2FText.js)
## Usage

\`\`\`javascript
import { Text } from 'grommet';
<Text />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can be 
    specified to distinguish horizontal margin, vertical margin, and margin on 
    a particular side. For vertical margin to be applied, Text needs to be 
    contained within a layout component (such as Box or a generic div) or 
    behave as a div (by applying as=\\"div\\" or a display style of 
    inline-block).

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**color**

A color identifier to use for the text color.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**size**

The font size and line space height of the text. Defaults to \`medium\`.

\`\`\`
xsmall
small
medium
large
xlarge
xxlarge
2xl
3xl
4xl
5xl
6xl
string
\`\`\`

**tag**

The DOM tag to use for the element. NOTE: This is deprecated in favor
         of indicating the DOM tag via the 'as' property.

\`\`\`
string
function
\`\`\`

**as**

The DOM tag or react component to use for the element. Defaults to \`span\`.

\`\`\`
string
function
element
\`\`\`

**textAlign**

How to align the text inside the component. Defaults to \`start\`.

\`\`\`
start
center
end
justify
\`\`\`

**tip**

tooltip or a hint when hovering over the text. If the
        value is a string and no a11yTitle value is provided, tip value will be
        used for the a11yTitle default value.

\`\`\`
{
  content: 
    node
    string,
  dropProps: 
    {

    },
  plain: boolean
}
string
\`\`\`

**truncate**

Restrict the text to a single line and truncate with ellipsis if it
is too long to all fit. For truncate to be applied, Text needs to be 
contained within a layout component (such as Box or a generic div). If 
truncate = tip, the full text content will be placed in a Tip that will appear 
on hover.

\`\`\`
boolean
tip
\`\`\`

**weight**

Font weight

\`\`\`
normal
bold
number
\`\`\`

**wordBreak**

Whether words should break when reaching the end of a line. Defaults to \`normal\`.

\`\`\`
normal
break-all
keep-all
break-word
\`\`\`
  
## Intrinsic element

\`\`\`
span
\`\`\`
## Theme
  
**global.colors.text**

The text color used for Text. In order for this to take 
    effect, global.colors.background needs to be defined. Expects \`object | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: '#f8f8f8', light: '#444444' }
\`\`\`

**text.font.family**

The font family to use for Text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**text**

The possible sizes of the text in terms of its font-size and 
line-height. Expects \`object\`.

Defaults to

\`\`\`
{
      xsmall: {
        size: '12px',
        height: '18px',
       },
      small: {
        size: '14px',
        height: '20px',
       },
      medium: {
        size: '18px',
        height: '24px',
      },
      large: {
        size: '22px',
        height: '28px',
      },
      xlarge: {
        size: '26px',
        height: '32px',
      },
      xxlarge: {
        size: '34px',
        height: '40px',
      },
    }
\`\`\`

**text.extend**

Any additional style for Text. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.edgeSize**

The possible sizes for margin. Expects \`object\`.

Defaults to

\`\`\`
{
    edgeSize: {
      none: '0px',
      hair: '1px',
      xxsmall: '3px',
      xsmall: '6px',
      small: '12px',
      medium: '24px',
      large: '48px',
      xlarge: '96px',
      responsiveBreakpoint: 'small',
    },
  }
\`\`\`
",
  "TextArea": "## TextArea
A control to input multiple lines of text.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Input-TextArea&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/textarea&module=%2Fsrc%2FTextArea.js)
## Usage

\`\`\`javascript
import { TextArea } from 'grommet';
<TextArea id='item' name='item' />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.

\`\`\`
string
\`\`\`

**id**

The id attribute of the textarea.

\`\`\`
string
\`\`\`

**fill**

Whether the width and height should fill the container.

\`\`\`
boolean
\`\`\`

**focusIndicator**

Whether the plain TextArea should receive a focus outline.

\`\`\`
boolean
\`\`\`

**name**

The name attribute of the textarea.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user types in the textarea.

\`\`\`
function
\`\`\`

**placeholder**

Placeholder text to use when no value is provided.

\`\`\`
string
\`\`\`

**plain**

Whether this is a plain textarea with no border or padding.
Only use this when the containing context provides sufficient affordance.

\`\`\`
boolean
\`\`\`

**value**

What text to put in the textarea.

\`\`\`
string
\`\`\`

**resize**

Whether user is allowed to resize the textarea. Defaults to \`true\`.

\`\`\`
vertical
horizontal
boolean
\`\`\`

**size**

The size of the text.

\`\`\`
xsmall
small
medium
large
xlarge
xxlarge
2xl
3xl
4xl
5xl
6xl
string
\`\`\`
  
## Intrinsic element

\`\`\`
textarea
\`\`\`
## Theme
  
**global.colors.border**

The color of the border. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
[object Object]
\`\`\`

**global.control.border.color**

The border color. Expects \`string\`.

Defaults to

\`\`\`
border
\`\`\`

**global.control.border.radius**

The border radius. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**global.control.border.width**

The border width. Expects \`string\`.

Defaults to

\`\`\`
1px
\`\`\`

**textArea.extend**

Any additional style for Text. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**textArea.disabled.opacity**

The opacity when the textArea is disabled. Expects \`number\`.

Defaults to

\`\`\`
0.3
\`\`\`

**global.focus.border.color**

The border color of the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.outline.color**

The outline color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.outline.size**

The size of the outline around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.shadow.color**

The shadow color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.shadow.size**

The size of the shadow around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**global.colors.placeholder**

The placeholder color used for the component. Expects \`string\`.

Defaults to

\`\`\`
#AAAAAA
\`\`\`

**global.input.font.height**

The line-height of the text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.font.size**

The size of the text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.font.weight**

The font-weight of the text. This value will only be 
      applied if global.input.weight is undefined. Expects \`number | string\`.

Defaults to

\`\`\`
600
\`\`\`

**global.input.weight**

This value has been deprecated and replaced by 
      global.input.font.weight. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.padding**

The padding of the text. Expects \`string | { top: string, bottom: string, left: string, right: 
        string, horizontal: string, vertical: string }\`.

Defaults to

\`\`\`
12px
\`\`\`

**global.input.extend**

Any additional style for an input. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.control.disabled.opacity**

The opacity when a component is disabled. Expects \`number\`.

Defaults to

\`\`\`
0.3
\`\`\`
",
  "TextInput": "## TextInput
A control to input a single line of text, with optional suggestions.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Input-TextInput&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/textinput&module=%2Fsrc%2FTextInput.js)
## Usage

\`\`\`javascript
import { TextInput } from 'grommet';
<TextInput id='item' name='item' />
\`\`\`

## Properties

**a11yTitle**

Custom title to be used by screen readers.

\`\`\`
string
\`\`\`

**defaultSuggestion**

Default suggestion to highlight, as an index into the suggestions array.

      If set, the suggestion at the specified index in the suggestions array
      will be highlighted by default when the suggestions drop opens.
      

\`\`\`
number
\`\`\`

**dropAlign**

How to align the drop. Defaults to \`{
  \\"top\\": \\"bottom\\",
  \\"left\\": \\"left\\"
}\`.

\`\`\`
{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}
\`\`\`

**dropHeight**

The height of the drop container.

\`\`\`
xsmall
small
medium
large
xlarge
string
\`\`\`

**dropTarget**

Target where any suggestions drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the TextInput itself by default.

\`\`\`
object
\`\`\`

**dropProps**

Any valid Drop prop.

\`\`\`
object
\`\`\`

**icon**

An optional icon to show. This could be used to provide an
      indication of what kind of input is expected, like an email icon,
      or what the input will be used for, like a search icon.

\`\`\`
element
\`\`\`

**id**

The id attribute of the input.

\`\`\`
string
\`\`\`

**focusIndicator**

Whether the plain TextInput should receive a focus outline.

\`\`\`
boolean
\`\`\`

**messages**

Custom messages for TextInput. Used for accessibility by screen
        readers. Defaults to \`{
  \\"enterSelect\\": \\"(Press Enter to Select)\\",
  \\"suggestionsCount\\": \\"suggestions available\\",
  \\"suggestionsExist\\": \\"This input has suggestions use arrow keys to navigate\\",
  \\"suggestionIsOpen\\": \\"Suggestions drop is open, continue to use arrow keys to navigate\\"
}\`.

\`\`\`
{
  enterSelect: string,
  suggestionsCount: string,
  suggestionsExist: string,
  suggestionIsOpen: string
}
\`\`\`

**name**

The name of the attribute when in a Form or FormField.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user types in the input.

\`\`\`
function
\`\`\`

**onSelect**

Note: This function is deprecated, use onSuggestionSelect instead.
      Function that will be called when the user selects a suggestion.
      The suggestion contains the object chosen from the supplied suggestions.
      When used in conjunction with onSuggestionSelect
      this will default to React's onSelect

\`\`\`
function
\`\`\`

**onSuggestionSelect**

Function that will be called when the user selects a suggestion.
      The suggestion contains the object chosen from the supplied suggestions.

\`\`\`
function
\`\`\`

**onSuggestionsOpen**

Function that will be called when the suggestions drop is opened.

\`\`\`
function
\`\`\`

**onSuggestionsClose**

Function that will be called when the suggestions drop is closed.

\`\`\`
function
\`\`\`

**placeholder**

Placeholder to use when no value is provided.

\`\`\`
node
\`\`\`

**plain**

Whether this is a plain input with no border or outline.
      Use \\"full\\" to remove padding in addition to removing border and outline.
      Only use this when the containing context provides sufficient
      affordance.

\`\`\`
boolean
full
\`\`\`

**reverse**

Whether an icon should be reversed so that the icon is at the
      end of the input.

\`\`\`
boolean
\`\`\`

**size**

The size of the text.

\`\`\`
xsmall
small
medium
large
xlarge
xxlarge
2xl
3xl
4xl
5xl
6xl
string
\`\`\`

**suggestions**

Suggestions to show. It is recommended to avoid showing too many
suggestions and instead rely on the user to type more.

\`\`\`
[
  {
    label: node,
    value: any
  }
  string
]
\`\`\`

**textAlign**

How to align the text inside the input. Defaults to \`start\`.

\`\`\`
start
center
end
\`\`\`

**value**

What text to put in the input.

\`\`\`
string
number
\`\`\`
  
## Intrinsic element

\`\`\`
input
\`\`\`
## Theme
  
**global.colors.border**

The color of the border. Expects \`object\`.

Defaults to

\`\`\`
[object Object]
\`\`\`

**global.control.border.color**

The border color. Expects \`string\`.

Defaults to

\`\`\`
border
\`\`\`

**global.control.border.radius**

The border radius. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**global.control.border.width**

The border width. Expects \`string\`.

Defaults to

\`\`\`
1px
\`\`\`

**select.step**

How many suggestions to render at a time. Expects \`number\`.

Defaults to

\`\`\`
20
\`\`\`

**text**

The possible sizes of the text in terms of its font-size and
    line-height. Expects \`object\`.

Defaults to

\`\`\`
{
      xsmall: {
        size: '12px',
        height: '18px',
       },
      small: {
        size: '14px',
        height: '20px',
       },
      medium: {
        size: '18px',
        height: '24px',
      },
      large: {
        size: '22px',
        height: '28px',
      },
      xlarge: {
        size: '26px',
        height: '32px',
      },
      xxlarge: {
        size: '34px',
        height: '40px',
      },
    }
\`\`\`

**textInput.extend**

Any additional style for TextInput. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**textInput.container.extend**

Any additional style for TextInput container. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**textInput.placeholder.extend**

Any additional style for non-string placeholder inside TextInput. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**textInput.suggestions.extend**

Any additional style for TextInput suggestions. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**textInput.disabled.opacity**

The opacity when the textInput is disabled. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.border.color**

The border color of the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.outline.color**

The outline color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.outline.size**

The size of the outline around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.shadow.color**

The shadow color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.shadow.size**

The size of the shadow around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**global.colors.placeholder**

The placeholder color used for the component. Expects \`string\`.

Defaults to

\`\`\`
#AAAAAA
\`\`\`

**global.control.disabled.opacity**

The opacity when a component is disabled. Expects \`number\`.

Defaults to

\`\`\`
0.3
\`\`\`

**global.input.font.height**

The line-height of the text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.font.size**

The size of the text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.font.weight**

The font-weight of the text. This value will only be 
      applied if global.input.weight is undefined. Expects \`number | string\`.

Defaults to

\`\`\`
600
\`\`\`

**global.input.weight**

This value has been deprecated and replaced by 
      global.input.font.weight. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.padding**

The padding of the text. Expects \`string | { top: string, bottom: string, left: string, right: 
        string, horizontal: string, vertical: string }\`.

Defaults to

\`\`\`
12px
\`\`\`

**global.input.extend**

Any additional style for an input. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Tip": "## Tip
Tooltip or a hint when hovering over an element. The tooltip will render 
      when hovering on top of the Tip's child node or string.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Controls-Tip&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/tip&module=%2Fsrc%2FTip.js)
## Usage

\`\`\`javascript
import { Tip } from 'grommet';
<Tip />
\`\`\`

## Properties

**content**

The tooltip content inside the drop.

\`\`\`
node
\`\`\`

**dropProps**

Any valid Drop prop to style the Tip drop container. Defaults to \`{
  \\"trapFocus\\": false
}\`.

\`\`\`
object
\`\`\`

**plain**

Whether content should have default styling from tip.content.

\`\`\`
boolean
\`\`\`
  
## Theme
  
**tip.content**

Any valid Box property for the Tip container. Not applicable 
    when using Tip plain prop. Expects \`object\`.

Defaults to

\`\`\`
{ background: 'background-contrast', elevation: 'small', 
    margin: 'xsmall', pad: { vertical: 'xsmall', horizontal: 'small' }, 
    round: 'small'}
\`\`\`

**tip.drop**

Any valid Drop property for the Tip. Expects \`object\`.

Defaults to

\`\`\`
{
      align: { top: 'bottom' },   
      background: 'none',
      elevation: 'none',
      margin: 'none'
    }
\`\`\`
",
  "Video": "## Video
A video player.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Media-Video&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/video&module=%2Fsrc%2FVideo.js)
## Usage

\`\`\`javascript
import { Video } from 'grommet';
<Video />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**autoPlay**

Enables automatic playback of the video as soon as it is loaded.

\`\`\`
boolean
\`\`\`

**controls**

Whether to show playback controls and where to place them. Defaults to \`over\`.

\`\`\`
false
over
below
\`\`\`

**fit**

How the image fills its container.

\`\`\`
cover
contain
\`\`\`

**loop**

Enables continuous video looping.

\`\`\`
boolean
\`\`\`

**mute**

Enables video muting. This option is best used with the autoPlay flag.

\`\`\`
boolean
\`\`\`

**messages**

Custom messages. Used for accessibility by screen readers.

\`\`\`
{
  closeMenu: string,
  fullScreen: string,
  progressMeter: string,
  openMenu: string,
  pauseButton: string,
  playButton: string,
  scrubber: string,
  volumeDown: string,
  volumeUp: string
}
\`\`\`
  
## Intrinsic element

\`\`\`
video
\`\`\`
## Theme
  
**global.edgeSize.responsiveBreakpoint**

The actual breakpoint to trigger changes in the video component layout. Expects \`string\`.

Defaults to

\`\`\`
small
\`\`\`

**global.edgeSize.xsmall**

The width of the video scrubber. Expects \`object\`.

Defaults to

\`\`\`
6px
\`\`\`

**video.captions.background**

The caption background color of the video  Expects \`string\`.

Defaults to

\`\`\`
rgba(0, 0, 0, 0.7)
\`\`\`

**video.icons.closedCaption**

The icon to use for the caption. Expects \`React.Element\`.

Defaults to

\`\`\`
<ClosedCaption />
\`\`\`

**video.icons.configure**

The icon to use for the configuration action. Expects \`React.Element\`.

Defaults to

\`\`\`
<Actions />
\`\`\`

**video.icons.fullScreen**

The icon to use for viewing the video in full screen. Expects \`React.Element\`.

Defaults to

\`\`\`
<Expand />
\`\`\`

**video.icons.pause**

The icon to use for pausing the video. Expects \`React.Element\`.

Defaults to

\`\`\`
<Pause />
\`\`\`

**video.icons.play**

The icon to use for playing the video. Expects \`React.Element\`.

Defaults to

\`\`\`
<Play />
\`\`\`

**video.icons.reduceVolume**

The icon to use for the action of lowering the volume. Expects \`React.Element\`.

Defaults to

\`\`\`
<VolumeLow />
\`\`\`

**video.icons.volume**

The icon to use for the action of raising the volume. Expects \`React.Element\`.

Defaults to

\`\`\`
<Volume />
\`\`\`

**video.scrubber.color**

The background color of the video scrubber. Expects \`string\`.

Defaults to

\`\`\`
light-4
\`\`\`

**video.extend**

Any additional style for Video. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "WorldMap": "## WorldMap
A map of the world, or a continent.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Visualizations-WorldMap&full=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/worldmap&module=%2Fsrc%2FWorldMap.js)
## Usage

\`\`\`javascript
import { WorldMap } from 'grommet';
<WorldMap />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**color**

Color when hovering over places while selecting.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**continents**

Continent details.

\`\`\`
[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  name: 
    Africa
    Asia
    Australia
    Europe
    North America
    South America,
  onClick: function,
  onHover: function
}]
\`\`\`

**fill**

Whether the width and/or height should fill the container.

\`\`\`
horizontal
vertical
boolean
\`\`\`

**onSelectPlace**

Called when the user clicks on a place.
        It is passed the location.

\`\`\`
function
\`\`\`

**places**

Place details. location is an array of two numeric values that indicates
       the latitude and longitude of the specified location.

\`\`\`
[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  name: string,
  location: [number],
  onClick: function,
  onHover: function
}]
\`\`\`

**hoverColor**

Color when hovering over places while selecting.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`
  
## Intrinsic element

\`\`\`
svg
\`\`\`
## Theme
  
**worldMap.color**

The color for each individual dot when a color is not passed as a prop Expects \`string\`.

Defaults to

\`\`\`
light-3
\`\`\`

**worldMap.continent.active**

The size of the visual dots belonging to a continent when the
continent is being hovered. Expects \`string\`.

Defaults to

\`\`\`
8px
\`\`\`

**worldMap.continent.base**

The size of the visual dots belonging to a continent that is
not being hovered. Expects \`string\`.

Defaults to

\`\`\`
6px
\`\`\`

**worldMap.hover.color**

The color for an individual dot when it is being hovered Expects \`string\`.

Defaults to

\`\`\`
light-4
\`\`\`

**worldMap.place.active**

The size of a visual dot for an individual place in the map 
when it is being hovered. Expects \`string\`.

Defaults to

\`\`\`
20px
\`\`\`

**worldMap.place.base**

The size of the visual dot representing an individual place 
in the map when it is not being hovered. Expects \`string\`.

Defaults to

\`\`\`
8px
\`\`\`

**worldMap.extend**

Any additional style for the WorldMap. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
}
`;
